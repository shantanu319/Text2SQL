[
  {
    "instruction": "Generate a SQL query to find all employees who earn more than $50,000.",
    "input": "Database has tables: employee_hire_evaluation.employee(id, name, employee_ID, date_of_hire, job_title, salary), employee_hire_evaluation.department(department_ID, name, creation, last_update_date, department_head)",
    "output": "SELECT name FROM employee_hire_evaluation.employee WHERE salary > 50000;"
  },
  {
    "instruction": "Create a query to list the names of all customers who have placed an order in the last month.",
    "input": "Database has tables: yelp.business(business_id, name, neighborhood, address, city, state, postal_code, latitude, longitude, stars, review_count, is_open, categories), yelp.review(business_id, review_id, user_id, stars, date, text, useful, funny, cool)",
    "output": "SELECT DISTINCT b.name FROM yelp.business b JOIN yelp.review r ON b.business_id = r.business_id WHERE r.date >= DATE('now', '-1 month');"
  },
  {
    "instruction": "Find the total number of matches won by players from each country.",
    "input": "Database has tables: wta_1.players(player_id, first_name, last_name, hand, birth_date, country_code), wta_1.matches(match_id, winner_id, loser_id, winner_rank, loser_rank, winner_rank_points, loser_rank_points, tourney_id, score), wta_1.rankings(date, ranking, player_id, ranking_points)",
    "output": "SELECT p.country_code, COUNT(m.match_id) as total_wins FROM wta_1.players p JOIN wta_1.matches m ON p.player_id = m.winner_id GROUP BY p.country_code ORDER BY total_wins DESC;"
  },
  {
    "instruction": "Get a list of all properties with a sale price more than $1000.",
    "input": "Database has tables: real_estate_properties.other_available_features(feature_id, feature_type_code, feature_name), real_estate_properties.properties(property_id, date_of_construction, property_type_code, property_address, accommodation_count, monthly_rental_rate, sale_price)",
    "output": "SELECT property_address, sale_price FROM real_estate_properties.properties WHERE sale_price > 1000 ORDER BY sale_price DESC;"
  },
  {
    "instruction": "List the top 5 movies with the most actors.",
    "input": "Database has tables: imdb.movie(mid, title, release_year, title_aka, budget), imdb.actor(aid, gender, name, nationality, birth_city, birth_year), imdb.cast(id, msid, aid, role)",
    "output": "SELECT m.title, COUNT(c.aid) as actor_count FROM imdb.movie m JOIN imdb.cast c ON m.mid = c.msid GROUP BY m.mid, m.title ORDER BY actor_count DESC LIMIT 5;"
  },
  {
    "instruction": "Find all stadiums that have hosted at least 5 concerts.",
    "input": "Database has tables: concert_singer.stadium(Stadium_ID, Location, Name, Capacity, Highest, Lowest, Average), concert_singer.singer(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male), concert_singer.concert(concert_ID, concert_Name, Theme, Stadium_ID, Year)",
    "output": "SELECT s.Name, COUNT(c.concert_ID) as num_concerts FROM concert_singer.stadium s JOIN concert_singer.concert c ON s.Stadium_ID = c.Stadium_ID GROUP BY s.Stadium_ID, s.Name HAVING COUNT(c.concert_ID) >= 5;"
  },
  {
    "instruction": "Find golden retrievers and their trainers.",
    "input": "Database has tables: dog_kennels.dogs(dog_id, name, age, breed, date_of_birth, gender, weight, abandoned, dog_kennel_id), dog_kennels.professionals(professional_id, role_code, first_name, last_name, street, city, zip_code, state, email_address)",
    "output": "SELECT d.name as dog_name, p.first_name, p.last_name FROM dog_kennels.dogs d JOIN dog_kennels.professionals p WHERE d.breed = 'Golden Retriever' AND p.role_code = 'Trainer';"
  },
  {
    "instruction": "Calculate the monthly growth of publications in 2022.",
    "input": "Database has tables: academic.publication(abstract, cid, citation_num, jid, pid, reference_num, title, year), academic.author(aid, homepage, name, oid), academic.writes(aid, pid), academic.conference(cid, homepage, name)",
    "output": "WITH monthly_publications AS (SELECT EXTRACT(MONTH FROM year) as month, COUNT(pid) as monthly_count FROM academic.publication WHERE year = 2022 GROUP BY EXTRACT(MONTH FROM year)) SELECT m1.month, ((m1.monthly_count - m2.monthly_count) / m2.monthly_count) * 100 as growth_percentage FROM monthly_publications m1 JOIN monthly_publications m2 ON m1.month = m2.month + 1 ORDER BY m1.month;"
  },
  {
    "instruction": "Find the average time between a TV show's episodes airing.",
    "input": "Database has tables: tvshow.TV_Channel(id, series_name, Country, Language, Content, Pixel_aspect_ratio_PAR, HD_or_SD), tvshow.TV_series(id, Episode, Air_Date, Rating, Share, 18_49_Rating_Share, Viewers, Weekly_Rank, Channel)",
    "output": "SELECT c.series_name, AVG(JULIANDAY(t2.Air_Date) - JULIANDAY(t1.Air_Date)) as avg_days_between FROM tvshow.TV_Channel c JOIN tvshow.TV_series t1 ON c.id = t1.Channel JOIN tvshow.TV_series t2 ON t1.Channel = t2.Channel WHERE t1.Episode + 1 = t2.Episode GROUP BY c.series_name;"
  },
  {
    "instruction": "Generate a report of weekly flights between airports.",
    "input": "Database has tables: atis.flight(flight_id, flight_days, from_airport, to_airport, departure_time, arrival_time), atis.airport(airport_code, airport_name, airport_location, state_code, country_name, time_zone_code)",
    "output": "SELECT f.flight_id, a1.airport_name as departure_airport, a2.airport_name as arrival_airport, COUNT(*) as weekly_flights FROM atis.flight f JOIN atis.airport a1 ON f.from_airport = a1.airport_code JOIN atis.airport a2 ON f.to_airport = a2.airport_code GROUP BY f.flight_id, a1.airport_name, a2.airport_name ORDER BY weekly_flights DESC;"
  },
  {
    "instruction": "Find students who haven't completed any transcripts.",
    "input": "Database has tables: student_transcripts_tracking.Students(student_id, first_name, middle_name, last_name, date_of_birth, gender, degree_program_id), student_transcripts_tracking.Degree_Programs(degree_program_id, department_id, degree_summary_name, degree_summary_description), student_transcripts_tracking.Transcripts(transcript_id, transcript_date, transcript_status, student_id)",
    "output": "SELECT s.first_name, s.last_name, d.degree_summary_name FROM student_transcripts_tracking.Students s JOIN student_transcripts_tracking.Degree_Programs d ON s.degree_program_id = d.degree_program_id WHERE NOT EXISTS (SELECT 1 FROM student_transcripts_tracking.Transcripts t WHERE t.student_id = s.student_id);"
  },
  {
    "instruction": "Calculate the retention rate of car makes between given ID ranges.",
    "input": "Database has tables: car_1.cars_data(Id, MakeId, Model, MSRP, Year, Invoice, EngineSize, Cylinders, Horsepower, MPG_City, MPG_Highway, Weight, Wheelbase), car_1.car_makers(Id, Maker, FullName, Country)",
    "output": "WITH group1 AS (SELECT c.MakeId FROM car_1.cars_data c WHERE c.Id BETWEEN 100 AND 200), group2 AS (SELECT c.MakeId FROM car_1.cars_data c WHERE c.Id BETWEEN 201 AND 300) SELECT COUNT(DISTINCT group2.MakeId) * 100.0 / COUNT(DISTINCT group1.MakeId) as retention_rate FROM group1 LEFT JOIN group2 ON group1.MakeId = group2.MakeId;"
  },
  {
    "instruction": "List all ships lost in battles after a certain date.",
    "input": "Database has tables: battle_death.battle(id, name, date, bulgarian_commander, latin_commander, result), battle_death.ship(lost_in_battle, id, name, tonnage, ship_type, country, date_sunk)",
    "output": "SELECT b.name as battle_name, s.name as ship_name FROM battle_death.battle b JOIN battle_death.ship s ON s.lost_in_battle = b.id WHERE CAST(SUBSTR(b.date, 1, 4) AS INTEGER) > 2000;"
  },
  {
    "instruction": "Get the average release year for each movie genre.",
    "input": "Database has tables: imdb.movie(mid, title, release_year, title_aka, budget), imdb.genre(gid, genre), imdb.classification(id, msid, gid), imdb.copyright(id, msid, cid)",
    "output": "SELECT g.genre, AVG(m.release_year) as average_year FROM imdb.genre g JOIN imdb.classification c ON g.gid = c.gid JOIN imdb.movie m ON c.msid = m.mid GROUP BY g.genre ORDER BY average_year DESC;"
  },
  {
    "instruction": "Find teachers who have taught all available courses.",
    "input": "Database has tables: course_teach.course(course_id, staring_date, course_name), course_teach.teacher(teacher_id, name, age, hometown), course_teach.course_arrange(course_id, teacher_id, room_id)",
    "output": "SELECT t.name as teacher_name FROM course_teach.teacher t WHERE NOT EXISTS (SELECT c.course_id FROM course_teach.course c WHERE NOT EXISTS (SELECT * FROM course_teach.course_arrange ca WHERE ca.teacher_id = t.teacher_id AND ca.course_id = c.course_id));"
  },
  {
    "instruction": "Get the top 5 publications with the most authors.",
    "input": "Database has tables: scholar.publication(pid, title, year, venue, citation_num), scholar.author(aid, name, gender, job_title, institution), scholar.writes(pid, aid, signature)",
    "output": "SELECT p.title, COUNT(w.aid) as author_count FROM scholar.publication p JOIN scholar.writes w ON p.pid = w.pid GROUP BY p.pid, p.title ORDER BY author_count DESC LIMIT 5;"
  },
  {
    "instruction": "Find job titles with more than 10 employees.",
    "input": "Database has tables: employee_hire_evaluation.employee(id, name, employee_ID, date_of_hire, job_title, salary), employee_hire_evaluation.evaluation(id, employee_ID, year_awarded, quarter, evaluation_results)",
    "output": "SELECT job_title, COUNT(*) as employee_count FROM employee_hire_evaluation.employee GROUP BY job_title HAVING COUNT(*) > 10;"
  },
  {
    "instruction": "List all users who have never written a review.",
    "input": "Database has tables: yelp.business(business_id, name, neighborhood, address, city, state, postal_code, latitude, longitude, stars, review_count, is_open, categories), yelp.users(user_id, name, review_count, yelping_since, useful, funny, cool, fans, average_stars), yelp.review(review_id, user_id, business_id, stars, date, text, useful, funny, cool)",
    "output": "SELECT u.name FROM yelp.users u LEFT JOIN yelp.review r ON u.user_id = r.user_id WHERE r.review_id IS NULL;"
  },
  {
    "instruction": "Find the most populated city in each country.",
    "input": "Database has tables: world_1.city(id, name, country_code, district, population), world_1.country(code, name, continent, region, surface_area, indep_year, population, life_expectancy, gnp)",
    "output": "SELECT co.name as country, ci.name as city, ci.population FROM world_1.city ci JOIN world_1.country co ON ci.country_code = co.code WHERE ci.population = (SELECT MAX(population) FROM world_1.city WHERE country_code = co.code);"
  },
  {
    "instruction": "Show all female participants in a voting system.",
    "input": "Database has tables: voter_1.votes(id, created, state, participant_id, election_id, votes), voter_1.participants(id, name, date_of_birth, gender, phone_number, street_number, zip_id)",
    "output": "SELECT * FROM voter_1.participants WHERE gender = 'F';"
  },
  {
    "instruction": "List singers ordered by age in descending order.",
    "input": "Database has tables: singer.singer(Singer_ID, Name, Country, Song_Name, Song_release_year, Age, Is_male), singer.concert(concert_ID, concert_Name, Theme, Stadium_ID, Year, Singer_ID)",
    "output": "SELECT Name, Age FROM singer.singer ORDER BY Age DESC;"
  },
  {
    "instruction": "Count the total number of students in a high school.",
    "input": "Database has tables: network_1.Friend(friend_id, friend_first, friend_last, gender), network_1.Highschooler(student_id, name, grade), network_1.Likes(student_id, liked_id)",
    "output": "SELECT COUNT(*) FROM network_1.Highschooler;"
  },
  {
    "instruction": "Find the restaurants with highest ratings in each city.",
    "input": "Database has tables: restaurants.Restaurant(ID, NAME, FOOD_TYPE, CITY_NAME, RATING), restaurants.Geographic(CITY_NAME, COUNTY, REGION), restaurants.Location(RESTAURANT_ID, HOUSE_NUMBER, STREET_NAME, CITY_NAME)",
    "output": "SELECT g.CITY_NAME, r.NAME, r.RATING FROM restaurants.Restaurant r JOIN restaurants.Geographic g ON r.CITY_NAME = g.CITY_NAME WHERE r.RATING = (SELECT MAX(RATING) FROM restaurants.Restaurant WHERE CITY_NAME = g.CITY_NAME);"
  },
  {
    "instruction": "List all states that border California.",
    "input": "Database has tables: geography.state(state_name, population, area, country_name, capital, density), geography.border_info(state_name, border), geography.city(city_name, population, country_name, state_name)",
    "output": "SELECT b.border FROM geography.border_info b WHERE b.state_name = 'California';"
  },
  {
    "instruction": "Find all museums visited more than 100 times.",
    "input": "Database has tables: museum_visit.museum(Museum_ID, Name, Type, Region), museum_visit.visit(visit_id, Museum_ID, visitor_id, Date, Total_Spent), museum_visit.visitor(visitor_id, Name, Age, Phone, Member_Status)",
    "output": "SELECT m.Name, COUNT(v.visit_id) as visit_count FROM museum_visit.museum m JOIN museum_visit.visit v ON m.Museum_ID = v.Museum_ID GROUP BY m.Museum_ID, m.Name HAVING COUNT(v.visit_id) > 100;"
  },
  {
    "instruction": "List all pets and their owners.",
    "input": "Database has tables: pets_1.Pets(pet_id, name, age, pet_type, weight, pet_color), pets_1.Owners(owner_id, name, address, date_of_birth), pets_1.Has_Pet(owner_id, pet_id, start_date)",
    "output": "SELECT o.name as owner_name, p.name as pet_name, p.pet_type FROM pets_1.Owners o JOIN pets_1.Has_Pet hp ON o.owner_id = hp.owner_id JOIN pets_1.Pets p ON hp.pet_id = p.pet_id;"
  },
  {
    "instruction": "Find the average student age for each program.",
    "input": "Database has tables: advising.student(student_id, lastname, firstname, program_id, declare_major, total_credit, total_gpa), advising.program(program_id, name, college, introduction), advising.course(course_id, name, department, credits)",
    "output": "SELECT p.name, AVG(s.total_credit / 30.0 + 18) as avg_age FROM advising.program p JOIN advising.student s ON p.program_id = s.program_id GROUP BY p.program_id, p.name;"
  },
  {
    "instruction": "List all orchestras with more than 50 members.",
    "input": "Database has tables: orchestra.orchestra(Orchestra_ID, Orchestra_Name, Conductor, Record_Company, Year_Formed, Major_Record_Format), orchestra.performance(Performance_ID, Orchestra_ID, Venue, Date, Attendance), orchestra.conductor(Conductor_ID, Name, Age, Nationality)",
    "output": "SELECT o.Orchestra_Name, COUNT(p.Performance_ID) as performance_count FROM orchestra.orchestra o JOIN orchestra.performance p ON o.Orchestra_ID = p.Orchestra_ID GROUP BY o.Orchestra_ID, o.Orchestra_Name HAVING COUNT(p.Performance_ID) > 50;"
  },
  {
    "instruction": "Find the highest ranking poker player from each country.",
    "input": "Database has tables: poker_player.poker_player(Poker_Player_ID, Name, Nationality, Earnings, World_Rank), poker_player.tournament(Tournament_ID, Name, Location, Buy_in, Year), poker_player.participates(Poker_Player_ID, Tournament_ID, Result, Prize_Amount, Final_Table)",
    "output": "SELECT p.Nationality, p.Name, MIN(p.World_Rank) as best_rank FROM poker_player.poker_player p GROUP BY p.Nationality;"
  },
  {
    "instruction": "List all document templates created in the last month.",
    "input": "Database has tables: cre_Doc_Template_Mgt.Templates(Template_ID, Template_Type_Code, Template_Name, Creation_Date, Last_Modified_Date), cre_Doc_Template_Mgt.Documents(Document_ID, Template_ID, Document_Name, Document_Description, Document_Creation_Date)",
    "output": "SELECT t.Template_Name, COUNT(d.Document_ID) as usage_count FROM cre_Doc_Template_Mgt.Templates t LEFT JOIN cre_Doc_Template_Mgt.Documents d ON t.Template_ID = d.Template_ID WHERE t.Creation_Date >= DATE('now', '-1 month') GROUP BY t.Template_ID, t.Template_Name;"
  },
  {
    "instruction": "Find all flights departing after 5pm.",
    "input": "Database has tables: flight_2.airline(uid, airline, abbreviation, country), flight_2.flight(flno, origin, destination, departure_date, arrival_date, aid, pilot), flight_2.airport(city, code, country)",
    "output": "SELECT f.flno, a1.city as origin_city, a2.city as destination_city, f.departure_date FROM flight_2.flight f JOIN flight_2.airport a1 ON f.origin = a1.code JOIN flight_2.airport a2 ON f.destination = a2.code WHERE SUBSTR(f.departure_date, 12, 5) > '17:00';"
  }
]
